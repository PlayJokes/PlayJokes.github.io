<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PlayJokes</title>
  <subtitle>加油吧少年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://playjokes.github.io/"/>
  <updated>2016-11-13T08:37:23.103Z</updated>
  <id>http://playjokes.github.io/</id>
  
  <author>
    <name>Pan Jie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MM1抢占式排队论Matlab算法实现</title>
    <link href="http://playjokes.github.io/2016/11/13/queuing-theory-matlab-imp/"/>
    <id>http://playjokes.github.io/2016/11/13/queuing-theory-matlab-imp/</id>
    <published>2016-11-13T07:25:43.000Z</published>
    <updated>2016-11-13T08:37:23.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排队论"><a href="#排队论" class="headerlink" title="排队论"></a>排队论</h2><h3 id="排队论简介"><a href="#排队论简介" class="headerlink" title="排队论简介"></a>排队论简介</h3><p>排队论(queuing theory),  通过对服务对象到来及服务时间的统计研究，得出这些数量指标（等待时间、排队长度、忙期长短等）的统计规律，然后根据这些规律来改进服务系统的结构或重新组织被服务对象，使得服务系统既能满足服务对象的需要，又能使机构的费用最经济或某些指标最优。</p>
<p>一般我们用X/Y/Z/A/B/C来表述一个排队论模型。</p>
<p>简单来说，排队论来源于现实中实际服务模型，例如银行服务顾客：银行总共有Z个服务前台，来银行服务顾客的到达时间分布X，每个顾客的服务时间，A个排队等待的位子（可容纳最多A个人等待），每天要服务的顾客数B人，对顾客的服务规则C（先来先服务等、高优先级抢占低优先级）。</p>
<p>那么其中可以评价这个服务模型的数据就有：当前服务的顾客数（服务队长），队列中的顾客数（排队队长），系统中总顾客数（总队长），顾客服务时间（服务时间），顾客等待时间（等待时间），顾客在系统中总时间（总时间），服务台两次空闲时间间隔（忙期）。</p>
<p>评价一个排队系统的好坏要以顾客与服务机构两方面的利益为标准。就顾客来说总希望等待时间或逗留时间越短越好，从而希望服务台个数尽可能多些但是，就服务机构来说，增加服务台数，就意味着增加投资，增加多了会造成浪费，增加少了要引起顾客的抱怨甚至失去顾客，增加多少比较好呢？顾客与服务机构为了照顾自己的利益对排队系统中的3个指标：队长、等待时间、服务台的忙期（简称忙期）都很关心。因此这3个指标也就成了排队论的主要研究内容。</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>在本文介绍的实验中，仿真嵌入式多任务抢占系统中，评价中断系统的动态性能。</p>
<p>假设嵌入式系统的中断到达时间间隔服从λ的泊松分布，中断处理时长服从μ的负指数分布。</p>
<p>约束条件：</p>
<ol>
<li>中断具有不同的优先级，优先级高的中断具有强占优先权，等高优先级中断处理结束后才能继续处理低优先级中断。</li>
</ol>
<p>模拟实验：</p>
<ol>
<li>输入过程：中断分为A，B两个2个中断等级，A优先级大于B；A可以强占B。A、B到达时间间隔分别服从λ1和λ2的泊松分布。</li>
<li>排队规则：中断到达系统，若无中断执行立刻相应该中断；若有高优先级或同等级中断在服务，进入等待队列，直到所有高优先级中断和在此之前到达的同等优先级中断服务结束后再处理；若有低优先级中断服务，在直接抢占服务，低优先级中断退回等待队列排队，同一优先级服从先来先服务原则。</li>
</ol>
<h2 id="简单算法实现"><a href="#简单算法实现" class="headerlink" title="简单算法实现"></a>简单算法实现</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>A类优先级大于B类，即A可以抢占B</p>
<ol>
<li>初始化A类中断到达时间间隔（1/lamda1指数分布函数生成）；<br>初始化A类中断服务间隔（1/mu1指数分布函数生成）；<br>初始化A类中断等待时间；<br>初始化A类中断到达时队列长度；<br>初始化A类中断结束时间；<br>初始化B类中断到达时间间隔（1/lamda2指数分布函数生成）；<br>初始化B类中断服务时间（1/mu1指数分布函数生成）；<br>初始化B类中断等待时间；<br>初始化B类中断到达时队列长度；<br>初始化B类中断结束时间。</li>
<li>累计A类、B类中断到达时间。记录为A[acount]、B[bcount]</li>
<li>在A，B类数据数组最后一位添加结束标志位（通过增加一个到达时间大于A，B所有数据的值）</li>
<li>设置cur_time记录当前时间，初始化为0</li>
<li>服务台数据：服务台状态（busy/free），当前服务优先级（A/B），当前服务序号（A、B数组中序号），当前服务预测结束时间。</li>
<li>循环A、B所有数据，终止条件（A、B数据循环结束并且服务台上服务结束）</li>
<li>如果服务台状态为空闲，A、B中最先到达的中断服务；更新当前时间为到达时间，预测时间，中断到达时队列长度，服务台数据更新。</li>
<li>否则为忙：<br> 若先到达A，<pre><code>如果预测结束时间比到达时间大，
    如果服务台当前中断优先级为A，则将其加入等待队列；
    如果当前服务台优先级为B，则抢占服务台，结算B的服务时间将其退回等待队列，设置服务台数据；
如果预测时间比到达时间小，
    处理服务台上中断和队列中断（转到9）；
记录到达时队列长度，i++;
</code></pre> 若先到达B<pre><code>如果预测结束时间比到达时间大，
    将其加入等待队列，记录到达时队列长度，j++；
如果预测时间比到达时间小，
    处理服务台上中断和队列中断（转到9）；
</code></pre></li>
<li>记录当前预测结束时间</li>
<li>循环队列中所有中断，终止条件为队列为空或者预测时间更新（预测时间增大），每次计算服务时间，等待时间（等待时间=中断结束时间-到达时间-服务时间），当前时间，预测结束时间</li>
<li>若循环跳出，如果不是预测等待时间更新，则处理服务台上中断并将服务台数据更新（state=free，优先级，序号等）；</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre><code>function[a, b]=mm1(a_total_num, b_total_num, lamda1,lamda2, mu1, mu2) 
%生成5*totalnum数据，分别代表中断达到时间、中断服务时间、中断等待时间、中断到达时等待队列长度、中断离开时间。
a = zeros(5, a_total_num+1);
b = zeros(5, b_total_num+1);

a(1,:) = poissrnd(lamda1, 1, a_total_num+1);
a(2,:) = exprnd(1/mu1, 1, a_total_num+1);
b(1,:) = poissrnd(lamda2, 1, a_total_num+1);
b(2,:) = exprnd(1/mu2, 1, a_total_num+1);

a_ser = a(2,:);
b_ser = b(2,:);

a(1,:) = cumsum(a(1,:));
b(1,:) = cumsum(b(1,:));

% 设置结束标志， 并不参与计算
a(1,end) = max(a(1,end-1),b(1,end-1)) + 1;
b(1,end) = a(1,end);

cur_time = 0;
a_queue = java.util.LinkedList;
b_queue = java.util.LinkedList;
predict_end_time = 0;
priority = -1;
state = 0;
index = -1;
i = 1;
j = 1;

%循环至最后一个并且服务台为空（队列也为空）
while i &lt; a_total_num+1 || j &lt; b_total_num + 1 || index ~= -1 
    if state == 0 % state is free
        if a(1,i) &lt;= b(1,j) % 服务a类
            cur_time = a(1,i);
            priority = 1;
            predict_end_time = cur_time + a(2, i);
            a(3, i) = 0;
            state = 1;
            index = i;
            i = i+1;
        else% 服务b类
            cur_time = b(1,j);
            priority = 0;
            predict_end_time = cur_time + b(2, j);
            b(3, j) = 0;
            state = 1;
            index = j;
            j = j+1;
        end
    else %当前状态忙
        if a(1,i) &lt;= b(1,j) 
            if predict_end_time &gt;= a(1,i) % 高优先级中断到达
                if priority == 1  % 当前服务中断为高优先级
                    a_queue.add(i);
                else % 当前服务中断为低优先级，抢占
                    b(2,index) = b(2,index) - (a(1,i)- cur_time); %记录b已经执行时间
                    b_queue.addFirst(index); %退回到队列
                    cur_time = a(1,i); %更新当前时间
                    predict_end_time = cur_time + a(2, i);
                    priority = 1;
                    index = i;
                end
                a(4, i) = a_queue.size() + b_queue.size();
                i = i + 1;
                process_flag = 0;
            else % 处理服务台和队列中的中断
                process_flag = 1;
            end
        else
            if predict_end_time &gt;= b(1,j)
                b_queue.add(j)
                b(4, j) = a_queue.size() + b_queue.size();
                j = j + 1;
                process_flag = 0;
            else % 处理服务台和队列中的中断
                process_flag = 1;
                %若更新了预测时间或者所有等待中断服务结束，跳出循环；否则处理所有中断
            end
        end

        if process_flag == 1
            %若更新了预测时间或者所有等待中断服务结束，跳出循环；否则处理所有中断
            before = predict_end_time;
            while predict_end_time &lt;= before &amp;&amp; (a_queue.size() ~= 0 || b_queue.size() ~= 0)
                if a_queue.size() ~= 0  % 处理队列中断
                    a(5,index) = cur_time + a(2,index);
                    a(3,index) = a(5,index) - a(1,index) - a_ser(index);
                    cur_time = a(5, index);
                    index = a_queue.pop();
                    predict_end_time = cur_time + a(2,index);
                    priority = 1;
                    continue;
                end

                if b_queue.size() ~= 0 % 处理队列中断
                    if priority == 1 
                        a(5,index) = cur_time + a(2,index);
                        a(3,index) = a(5,index) - a(1,index) - a_ser(index);
                        cur_time = a(5, index);
                        index = b_queue.pop();
                        predict_end_time = cur_time + b(2,index);
                    else
                        b(5,index) = cur_time + b(2,index);
                        b(3,index) = b(5,index) - b(1,index) - b_ser(index);
                        cur_time = b(5, index);
                        index = b_queue.pop();
                        predict_end_time = cur_time + b(2,index);
                    end
                    priority = 0;
                    continue;
                end
            end

            if predict_end_time &lt;= before % 处理服务台中断
                if priority == 1
                    a(5,index) = cur_time + a(2,index);
                    a(3,index) = a(5,index) - a(1,index) - a_ser(index);
                    cur_time = a(5, index);
                else
                    b(5,index) = cur_time + b(2,index);
                    b(3,index) = b(5,index) - b(1,index) - b_ser(index);
                    cur_time = b(5, index);
                end
                predict_end_time = cur_time;
                priority = -1;
                state = 0;
                index = -1;
            end
        end
    end
end
</code></pre><h2 id="C-可抢占式MMK排队论算法实现"><a href="#C-可抢占式MMK排队论算法实现" class="headerlink" title="C++可抢占式MMK排队论算法实现"></a>C++可抢占式MMK排队论算法实现</h2><p>由于本人对Matlab编程基本不了解，上部分用Matlab只实现了满足我需求的基本数据计算，并不能灵活调整服务台个数和添加更多优先级种类，在此挖坑用C++实现可抢占式MMK排队论。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;排队论&quot;&gt;&lt;a href=&quot;#排队论&quot; class=&quot;headerlink&quot; title=&quot;排队论&quot;&gt;&lt;/a&gt;排队论&lt;/h2&gt;&lt;h3 id=&quot;排队论简介&quot;&gt;&lt;a href=&quot;#排队论简介&quot; class=&quot;headerlink&quot; title=&quot;排队论简介&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Matlab" scheme="http://playjokes.github.io/categories/Matlab/"/>
    
    
      <category term="Matlab" scheme="http://playjokes.github.io/tags/Matlab/"/>
    
      <category term="排队论" scheme="http://playjokes.github.io/tags/%E6%8E%92%E9%98%9F%E8%AE%BA/"/>
    
      <category term="实现" scheme="http://playjokes.github.io/tags/%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Matlab使用队列方法</title>
    <link href="http://playjokes.github.io/2016/11/11/matlab-queue/"/>
    <id>http://playjokes.github.io/2016/11/11/matlab-queue/</id>
    <published>2016-11-11T08:05:50.000Z</published>
    <updated>2016-11-11T10:02:27.412Z</updated>
    
    <content type="html"><![CDATA[<p>在实现排队论算法过程中，需要使用队列数据结构；然Matlab中无基础数据结构，搜索无果；其中发现有自己时间队列，但有各种问题，遂放弃。</p>
<p>发现有更好的替代方式：<strong>直接使用Java库中LinkedList库</strong><br><a href="http://undocumentedmatlab.com/blog/using-java-collections-in-matlab" title="Using Java Collections in Matlab" target="_blank" rel="external">http://undocumentedmatlab.com/blog/using-java-collections-in-matlab</a></p>
<blockquote>
<p>Java Collections include interfaces and implementation classes. As of Matlab R2011b, Java interfaces cannot be used directly – only the implementation classes. Of the many Collection classes, the following are perhaps most useful (all classes belong to the java.util package, unless otherwise noted):</p>
<ul>
<li>Set: an interface that is implemented by classes characterized by their prevention of duplicate elements. Some notable implementation classes: EnumSet, HashSet, LinkedHashSet, TreeSet.</li>
</ul>
<ul>
<li>List: an interface that is implemented by classes characterized by ordered elements (a.k.a. sequences), which may be duplicates of each other and accessed based on their exact position within the list. Specially optimized internal algorithms enable sorting, shuffling, reversing, rotating, and other modifications of the list. Some notable implementation classes: Vector, Stack, LinkedList.</li>
</ul>
<ul>
<li>Queue: an interface that is implemented by classes designed for holding elements prior to processing, in an ordered list accessible only at one (=head) or two (head and tail) positions. All classes include specialized insertion, extraction and inspection methods. Some notable implementation classes: LinkedList, ArrayDeque, PriorityQueue.</li>
</ul>
<ul>
<li>Map: an interface that is implemented by classes characterized by elements of unique keys paired with associated values. Early Java versions used the java.util.Dictionary abstract superclass, but this was subsequently replaced by the java.util.Map interface class. Maps contain specialized algorithms for fast retrieval based on a supplied key. Some of the notable implementation classes: EnumMap, HashMap, Hashtable, TreeMap, LinkedHashMap.</li>
</ul>
</blockquote>
<p>如上可知，在MatlabR2011b之后，matlab不能支持直接使用Java接口，而是已实现好的Classes。而我们可以使用Java.Util库中的常用数据结构。其中我挑了LinkedList来替代Queue。同理，我们可以用Java自己实现很多有用的类，编译完成后直接使用Matlab调用。</p>
<p>注意：Matlab调用Java接口，不能使用Matlab自定义数据（自定义struct，class数据），只有简单数据类型（Matlab基本数据类型），除非线性化后能加入到对应数据结构中。</p>
<p>在Matlab命令行窗口输入 <code>methods(java.util.LinkedList)</code>来查看所有接口。</p>
<pre><code>&gt;&gt; methods(java.util.LinkedList)

类 java.util.LinkedList 的方法:

LinkedList descendingIterator isEmptypeek   removeAll  toArray
addelementiterator   peekFirst  removeFirsttoString   
addAll equals lastIndexOfpeekLast   removeFirstOccurrence  wait   
addFirst   getlistIterator   poll   removeLast 
addLastgetClass   notify pollFirst  removeLastOccurrence   
clear  getFirst   notifyAll  pollLast   retainAll  
clone  getLastoffer  popset
contains   hashCode   offerFirst push   size   
containsAllindexOfofferLast  remove subList
</code></pre><p>对于队列而且我们需要<code>Push()</code>, <code>Pop()</code>, <code>Peek()</code>, <code>Size()</code>这4个接口，那么对应于LinkedList，分别为<code>add()</code>, <code>pop()</code>, <code>peek()</code>, <code>size()</code>。</p>
<pre><code>&gt;&gt; queue=java.util.LinkedList;
&gt;&gt; queue.add(1);
&gt;&gt; queue.add(2);
&gt;&gt; queue

queue =

[1.0, 2.0]

&gt;&gt; peek=queue.peek();
&gt;&gt; peek

peek =

1

&gt;&gt; size=queue.size();
&gt;&gt; size

size =

2

&gt;&gt; queue.pop();
&gt;&gt; queue

queue =

[2.0]
</code></pre><p>插曲：在实现抢占式排队系统中，高优先级中断需要抢占低优先级，将低优先级中断回退到其优先级中的队首位置，所以在使用LinkedList时，使用了<code>addFirst()</code>来插入队首。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在实现排队论算法过程中，需要使用队列数据结构；然Matlab中无基础数据结构，搜索无果；其中发现有自己时间队列，但有各种问题，遂放弃。&lt;/p&gt;
&lt;p&gt;发现有更好的替代方式：&lt;strong&gt;直接使用Java库中LinkedList库&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Matlab" scheme="http://playjokes.github.io/categories/Matlab/"/>
    
    
      <category term="Matlab" scheme="http://playjokes.github.io/tags/Matlab/"/>
    
      <category term="队列" scheme="http://playjokes.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="Java" scheme="http://playjokes.github.io/tags/Java/"/>
    
      <category term="LinkedList" scheme="http://playjokes.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>Matlab学习笔记</title>
    <link href="http://playjokes.github.io/2016/11/11/learning-matlab/"/>
    <id>http://playjokes.github.io/2016/11/11/learning-matlab/</id>
    <published>2016-11-11T07:51:29.000Z</published>
    <updated>2016-11-11T12:02:09.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Matlab基础"><a href="#Matlab基础" class="headerlink" title="Matlab基础"></a>Matlab基础</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组在内存中按列存储</p>
<p>数组引用方式：<br>下标引用，以二维数组为例<code>A(a,b)</code>中a、b可由数字，冒号，end表示；a表示行，b表示列，若引用原数组中没有的元素，将扩展数组并且添加扩展的元素为0</p>
<p>冒号使用:<br>单冒号    :表示所有元素<br>双元素冒号 5:10表示从5开始到10号6个元素，包含首尾。<br>三元素冒号 5:2:10表示从5开始到10号以间隔2选取元素[5,7,9]</p>
<p>例：</p>
<pre><code>&gt;&gt; A = magic(4)

A = 16  2   3  13
    5  11  10   8
    9   7   6  12
    4  14  15   1

&gt;&gt; A(3,4) 

    ans = 12

&gt;&gt; A(1:end,2)

    ans =   2
            11
            7
            14

&gt;&gt; A(:) 

    ans =   16
            5
            9
            .
            .
            12
            1
</code></pre><p>向量、布尔引用</p>
<p>A([1,2])得到按需引用的列向量<br>x=A&gt;5 得到bool数组，<br>A(x) 得到按需引用的列向量</p>
<h3 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h3><h4 id="zeros-m-n-p…-classname"><a href="#zeros-m-n-p…-classname" class="headerlink" title="zeros(m,n,p…,classname)"></a>zeros(m,n,p…,classname)</h4><p>描述<br>返回一个<code>m×n×p×...</code>的classname类型的零矩阵；<br>若无指定classname，默认返回double类型矩阵 </p>
<p>classname取值：<code>&#39;double&#39;</code>,<code>&#39;single&#39;</code>, <code>&#39;int8&#39;</code>, <code>&#39;uint8&#39;</code>, <code>&#39;int16&#39;</code>, <code>&#39;uint16&#39;</code>, <code>&#39;int32&#39;</code>, or <code>&#39;uint32&#39;</code></p>
<p>例： </p>
<p><code>zeros(3,2,&#39;uint8&#39;)</code>，<code>zeros(3,2)</code></p>
<h4 id="exprnd-mu-m-n-…"><a href="#exprnd-mu-m-n-…" class="headerlink" title="exprnd(mu,m,n,…)"></a>exprnd(mu,m,n,…)</h4><p>描述<br>生成指定以mu为底的指数分布函数的随机数，返回的随机数结构与mu相同，mu可以为向量，矩阵等形式。</p>
<p>例：</p>
<pre><code>&gt;&gt; n1 = exprnd(5:10)

n1 = 7.5943  18.3400  2.7113  3.0936  0.6078  9.5841

&gt;&gt; n2 = exprnd(5,2,3)

n2 = 24.3339  13.5271  1.8788
    4.7932   4.3675  2.6468
</code></pre><h4 id="cumsum-A-dim"><a href="#cumsum-A-dim" class="headerlink" title="cumsum(A,dim)"></a>cumsum(A,dim)</h4><p>描述<br>返回A中各行的累加值，dim表示按第dim维累加，dim可以省略。cumsum函数返回结构同A。</p>
<p>若A是一维向量， cumsum(A) 返回一个向量，该向量中第m行的元素是A中第1行到第m行的所有元素累加和；</p>
<p>若A为二维数组，cumsum(A) = cumsum(A, 1)，结果中第m行第n列元素是A中第1行到第m行的所有第n列元素的累加和；同理 cumsum(A, 2)结果中第m行第n列元素是A中第1列到第m列的所有第n行元素的累加和；</p>
<p>多维数组同二维。</p>
<p>例： </p>
<pre><code>&gt;&gt;A=[1,2,3,4,5]

A =  1     2     3     4     5

&gt;&gt;cumsum(A)

ans = 1     3     6    10    15

&gt;&gt;A=magic(4)

A =
16     2     3    13
 5    11    10     8
 9     7     6    12
 4    14    15     1

&gt;&gt; cumsum(A,1)

ans =
16     2     3    13
21    13    13    21
30    20    19    33
34    34    34    34

&gt;&gt;cumsum(A,2)

ans =
16    18    21    34
 5    16    26    34
 9    16    22    34
 4    18    33    34
</code></pre><h4 id="min-max-A-dim"><a href="#min-max-A-dim" class="headerlink" title="min/max(A,[],dim)"></a>min/max(A,[],dim)</h4><p>描述<br>min(A)/max(A)：返回最小/最大的元素。</p>
<p>如果A是向量，则返回最大的元素；如果A是矩阵，则返回一个包含每列最值的行向量；如果A是多维矩阵，</p>
<p>[Y,U]=max(A)：返回行向量Y和U，Y向量记录A的每列的最大值，U向量记录每列最大值的行号</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Matlab基础&quot;&gt;&lt;a href=&quot;#Matlab基础&quot; class=&quot;headerlink&quot; title=&quot;Matlab基础&quot;&gt;&lt;/a&gt;Matlab基础&lt;/h2&gt;&lt;h3 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Matlab" scheme="http://playjokes.github.io/categories/Matlab/"/>
    
    
      <category term="Matlab" scheme="http://playjokes.github.io/tags/Matlab/"/>
    
      <category term="语法" scheme="http://playjokes.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="函数" scheme="http://playjokes.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
